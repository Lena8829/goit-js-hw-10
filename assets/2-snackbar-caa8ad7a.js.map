{"version":3,"file":"2-snackbar-caa8ad7a.js","sources":["../../src/js/2-snackbar.js"],"sourcesContent":["// // Напиши скрипт, який після сабміту форми створює проміс.\n\n// // *В середині колбека цього промісу через вказану користувачем кількість мілісекунд проміс має виконуватися(при fulfilled) або відхилятися(при rejected), залежно від обраної опції в радіокнопках.\n\n// // *Значенням промісу, яке передається як аргумент у методи resolve / reject, має бути значення затримки в мілісекундах.\n\n// // *Створений проміс треба опрацювати у відповідних для вдалого/невдалого виконання методах.\n\n// // *Якщо проміс виконується вдало, виводь у консоль наступний рядок, де delay — це значення затримки виклику промісу в мілісекундах.\n\n// //* `✅ Fulfilled promise in ${delay}ms`\n\n// // *Якщо проміс буде відхилено, то виводь у консоль наступний рядок, де delay — це значення затримки промісу в мілісекундах.\n\n// // *`❌ Rejected promise in ${delay}ms`;\n// //-----------------------------------------------------------------------------------------------------------------------------\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('.form');\nconst delayEl = form.querySelector(\"input[name='delay']\"); //введене значення затримки\nconst stateEl = form.querySelector(\"input[name='state']\");\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  // Отримуємо значення з поля введення та перетворюємо його число\n\n  const delay = parseInt(delayEl.value);\n  // Отримуємо обраний стан з радіокнопок\n  const state = stateEl.value;\n\n  // Створюємо новий проміс\n  const promise = new Promise((resolve, reject) => {\n    if (state === 'fulfilled') {\n      setTimeout(() => {\n        resolve(delay);\n      }, delay);\n    } else if (state === 'rejected') {\n      setTimeout(() => {\n        reject(delay);\n      }, delay);\n    }\n  });\n\n  // Встановлюємо таймер\n  //     setTimeout(() => {\n  //       //перевіряємо стан обраної кнопки\n  //       if (state === 'fulfilled') {\n  //         resolve(delay);\n  //       } else if (state === 'rejected') {\n  //         reject(delay);\n  //       }\n  //     }, delay);\n  //   });\n\n  //обробляємо проміс\n  promise\n    .then(delay => {\n      iziToast.success({\n        title: 'Fulfilled promise',\n        message: `✅ Fulfilled promise in ${delay}ms`,\n      });\n    })\n    .catch(delay => {\n      iziToast.error({\n        title: 'Rejected promise',\n        message: `❌ Rejected promise in ${delay}ms`,\n      });\n    });\n}\n"],"names":["form","delayEl","stateEl","onSubmit","event","delay","state","resolve","reject","iziToast"],"mappings":"yCAoBA,MAAMA,EAAO,SAAS,cAAc,OAAO,EACrCC,EAAUD,EAAK,cAAc,qBAAqB,EAClDE,EAAUF,EAAK,cAAc,qBAAqB,EAExDA,EAAK,iBAAiB,SAAUG,CAAQ,EAExC,SAASA,EAASC,EAAO,CACvBA,EAAM,eAAc,EAIpB,MAAMC,EAAQ,SAASJ,EAAQ,KAAK,EAE9BK,EAAQJ,EAAQ,MAGN,IAAI,QAAQ,CAACK,EAASC,IAAW,CAC3CF,IAAU,YACZ,WAAW,IAAM,CACfC,EAAQF,CAAK,CACd,EAAEA,CAAK,EACCC,IAAU,YACnB,WAAW,IAAM,CACfE,EAAOH,CAAK,CACb,EAAEA,CAAK,CAEd,CAAG,EAeE,KAAKA,GAAS,CACbI,EAAS,QAAQ,CACf,MAAO,oBACP,QAAS,0BAA0BJ,CAAK,IAChD,CAAO,CACP,CAAK,EACA,MAAMA,GAAS,CACdI,EAAS,MAAM,CACb,MAAO,mBACP,QAAS,yBAAyBJ,CAAK,IAC/C,CAAO,CACP,CAAK,CACL"}