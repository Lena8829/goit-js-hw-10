{"version":3,"file":"2-snackbar-7a466626.js","sources":["../../src/js/2-snackbar.js"],"sourcesContent":["// // Напиши скрипт, який після сабміту форми створює проміс.\n\n// // *В середині колбека цього промісу через вказану користувачем кількість мілісекунд проміс має виконуватися(при fulfilled) або відхилятися(при rejected), залежно від обраної опції в радіокнопках.\n\n// // *Значенням промісу, яке передається як аргумент у методи resolve / reject, має бути значення затримки в мілісекундах.\n\n// // *Створений проміс треба опрацювати у відповідних для вдалого/невдалого виконання методах.\n\n// // *Якщо проміс виконується вдало, виводь у консоль наступний рядок, де delay — це значення затримки виклику промісу в мілісекундах.\n\n// //* `✅ Fulfilled promise in ${delay}ms`\n\n// // *Якщо проміс буде відхилено, то виводь у консоль наступний рядок, де delay — це значення затримки промісу в мілісекундах.\n\n// // *`❌ Rejected promise in ${delay}ms`;\n// //-----------------------------------------------------------------------------------------------------------------------------\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('.form');\nconst delayEl = form.querySelector(\"input[name='delay']\"); //введене значення затримки\nconst stateEl = form.querySelector(\"input[name='state']\");\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  // Отримуємо значення з поля введення та перетворюємо його число\n\n  const delayValue = parseInt(delayEl.value);\n  // Отримуємо обраний стан з радіокнопок\n  const state = stateEl.value;\n\n  console.log(state);\n\n  // Створюємо новий проміс\n  const promise = new Promise((resolve, reject) => {\n    // Встановлюємо таймер\n    setTimeout(() => {\n      //перевіряємо стан обраної кнопки\n      if (state === 'fulfilled') {\n        resolve(delayValue);\n      } else if (state === 'rejected') {\n        reject(delayValue);\n      }\n    }, delayValue);\n  });\n\n  //обробляємо проміс\n  promise\n    .then(delay => {\n      iziToast.success({\n        title: 'Fulfilled promise',\n        message: `✅ Fulfilled promise in ${delay}ms`,\n      });\n    })\n    .catch(delay => {\n      iziToast.error({\n        title: 'Rejected promise',\n        message: `❌ Rejected promise in ${delay}ms`,\n      });\n    });\n}\n"],"names":["form","delayEl","stateEl","onSubmit","event","delayValue","state","resolve","reject","delay","iziToast"],"mappings":"oCAoBA,MAAMA,EAAO,SAAS,cAAc,OAAO,EACrCC,EAAUD,EAAK,cAAc,qBAAqB,EAClDE,EAAUF,EAAK,cAAc,qBAAqB,EAExDA,EAAK,iBAAiB,SAAUG,CAAQ,EAExC,SAASA,EAASC,EAAO,CACvBA,EAAM,eAAc,EAIpB,MAAMC,EAAa,SAASJ,EAAQ,KAAK,EAEnCK,EAAQJ,EAAQ,MAEtB,QAAQ,IAAII,CAAK,EAGD,IAAI,QAAQ,CAACC,EAASC,IAAW,CAE/C,WAAW,IAAM,CAEXF,IAAU,YACZC,EAAQF,CAAU,EACTC,IAAU,YACnBE,EAAOH,CAAU,CAEpB,EAAEA,CAAU,CACjB,CAAG,EAIE,KAAKI,GAAS,CACbC,EAAS,QAAQ,CACf,MAAO,oBACP,QAAS,0BAA0BD,CAAK,IAChD,CAAO,CACP,CAAK,EACA,MAAMA,GAAS,CACdC,EAAS,MAAM,CACb,MAAO,mBACP,QAAS,yBAAyBD,CAAK,IAC/C,CAAO,CACP,CAAK,CACL"}